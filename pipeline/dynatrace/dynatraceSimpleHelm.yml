resources:
  - name: helmGitHub_aa
    type: GitRepo
    configuration:
      gitProvider: DT_PIPELINE_INT
      # replace with your pipelines repository
      path: Dynatrace-Asad-Ali/pipelines-demo # if path is modified, change the name as well, per Pipelines doc
      branches:
        include: main
      buildOn:
        commit: true

  - name: simpleDockerImage_ab # change
    type: Image
    configuration:
      registry: simplehelmDockerIntegration
      sourceRepository: art-docker-dynatrace
      imageName: dynatracejtpp.jfrog.io/art-docker-dynatrace/busybox
      imageTag: '${run_number}'

  - name: simpleBuildInfo_aa
    type: BuildInfo
    configuration:
      sourceArtifactory: artifactoryIntegration
      buildName: SampleApp
      buildNumber: 1

  - name: simpleHelmChartBuildInfo_aa
    type: BuildInfo
    configuration:
      sourceArtifactory: artifactoryIntegration
      buildName: SampleApp
      buildNumber: '0.1.${run_number}'

  - name: simplehelmRepoChart_aa
    type: GitRepo
    configuration:
      gitProvider: DT_AA_PIPELINE_INT
      path: Dynatrace-Asad-Ali/pipelines-demo # replace with your repo
      branches:
        include: main
      buildOn:
        commit: true

  - name: simplehelmChart_aa
    type: HelmChart
    configuration:
      sourceArtifactory: artifactoryIntegration
      repository: simplecharts
      chart: busybox
      version: 0.0.0

pipelines:
  - name: dynatrace_demo_helm_aa
    configuration:
      environmentVariables:
        readOnly:
          my_releaseName: "busybox${run_number}"
    steps:
      - name: build_image
        type: DockerBuild
        configuration:
          affinityGroup: buildAndPush
          integrations:
            - name: artifactoryIntegration
          inputResources:
            - name: helmGitHub_aa
          dockerFileLocation: pipeline/dynatrace/
          dockerFileName: Dockerfile
          dockerImageName: dynatracejtpp.jfrog.io/art-docker-dynatrace/busybox
          dockerImageTag: $run_number

      - name: push_image
        type: DockerPush
        configuration:
          affinityGroup: buildAndPush
          autoPublishBuildInfo: true
          integrations:
            - name: artifactoryIntegration
          targetRepository: art-docker-dynatrace
          inputSteps:
            - name: build_image
          outputResources:
            - name: simpleBuildInfo_aa
            - name: simpleDockerImage_ab

      - name: helm_build
        type: HelmPublish
        configuration:
          helmVersion: 3
          chartPath: pipeline/dynatrace/busybox/
          affinityGroup: helm_install
          inputSteps:
            - name: push_image
          inputResources:
            - name: simplehelmRepoChart_aa
              trigger: false
          outputResources:
            - name: simplehelmChart_aa
            - name: simpleHelmChartBuildInfo_aa
        execution:
          onStart:
            - echo "Start"
            - printenv

      # Install Dynatrace agent on the cluster. Use the separate namespace
      - name: install_oneAgent_operator
        type: Bash
        configuration:
          affinityGroup: helm_install
          integrations:
            - name: k8sIntegration
            - name: DTEnvInfo
          inputSteps:
            - name: helm_build
        execution:
          onStart:
            - echo "Preparing for work..."
          onExecute:
            - echo "Installing and configuring OneAgent"
            - kubectl config current-context
            - kubectl get namespace
            - kubectl get pods
            - kubectl create namespace dynatrace
            - kubectl apply -f https://github.com/Dynatrace/dynatrace-oneagent-operator/releases/latest/download/kubernetes.yaml
            - kubectl -n dynatrace create secret generic oneagent --from-literal="apiToken=${int_DTEnvInfo_DT_API_TOKEN}" --from-literal="paasToken=${int_DTEnvInfo_DT_PAAS_TOKEN}"
            - curl -o cr.yaml https://raw.githubusercontent.com/Dynatrace/dynatrace-oneagent-operator/master/deploy/cr.yaml
            - sed -i "s/ENVIRONMENTID/scu37051/g" cr.yaml
            - echo ${int_DTEnvInfo_DT_URL}
            - cat cr.yaml
            #- sed -i 's/apiUrl:.*/apiUrl:a/b.*'
            ## configure cr.yaml file when we have all the data needed
            - kubectl apply -f cr.yaml
          onSuccess:
            - echo "Dynatrace OneAgent has beed successfully installed"
          onFailure:
            - echo "Failure"

      - name: deploy_helm
        type: HelmDeploy
        configuration:
          helmVersion: 3
          affinityGroup: helm_install
          releaseName: busybox${run_number}
          integrations:
            - name: k8sIntegration
          inputResources:
            - name: simplehelmChart_aa
            - name: simpleDockerImage_ab
          inputSteps:
            - name: install_oneAgent_operator
          valueFilePaths:
            - values.yaml
        execution:
          onStart:
            - kubectl config current-context
            - add_run_variables CLUSTER="$(kubectl config current-context)"
            - add_run_variables RELEASE_NAME="${my_releaseName}"
            - printenv
          onSuccess:
            - kubectl get pods
          onFailure:
            - echo "Failure"

      - name: modify_properties
        type: Bash
        configuration:
          affinityGroup: helm_install
          integrations:
            - name: artifactoryIntegration
          inputResources:
            - name: simplehelmChart_aa
          inputSteps:
            - name: deploy_helm
        execution:
          onStart:
            - echo "Preparing for work..."
          onExecute:
            - printenv
            - echo "Modifying helm chart properties"
            - echo "Set current time as a deployment time"
            - TIME=$(date +%s)
            - curl --location --request PUT "${int_artifactoryIntegration_url}/api/storage/simplecharts/busybox-${res_simplehelmChart_aa_version}.tgz?properties=deployedOnCluster=${CLUSTER}%7ChelmInstallationName=${RELEASE_NAME}%7CdeploymentTimestamp=${TIME}" --header "Accept:application/json" --header "X-Jfrog-Art-Api:${int_artifactoryIntegration_apikey}"
          onSuccess:
            - echo ""
          onFailure:
            - echo "Failure"

      - name: Dynatrace_deployment_event
        type: Bash
        configuration:
          affinityGroup: helm_install
          integrations:
            - name: artifactoryIntegration
            - name: DTEnvInfo
          inputResources:
            - name: helmGitHub_aa
            - name: simplehelmChart_aa
          inputSteps:
            - name: modify_properties
        execution:
          onStart:
            - echo "Preparing for work..."
          onExecute:
            - printenv
            - JSONOutput=$(curl --location --request GET "${int_artifactoryIntegration_url}/api/storage/simplecharts/busybox-${res_simplehelmChart_aa_version}.tgz?properties=helmInstallationName,chart.version,deployedOnCluster,vcs.url" --header "Accept:application/json" --header "X-Jfrog-Art-Api:${int_artifactoryIntegration_apikey}" | jq .)
            - echo $JSONOutput
            - ChartVersion=$(echo $JSONOutput | jq '.properties."chart.version"[0]')
            - HelmInstallationName=$(echo $JSONOutput | jq '.properties.helmInstallationName[0]')
            - VCS_URL=$(echo $JSONOutput | jq '.properties."vcs.url"[0]')
            - DeployedOnCluster=$(echo $JSONOutput | jq '.properties.deployedOnCluster[0]')
            - echo $ChartVersion
            - echo $HelmInstallationName
            - echo $run_number
            - echo $build_image_dockerImageName
            - echo $int_artifactoryIntegration_url
            - echo $res_simplehelmChart_aa_version
            - echo curl -H 'Content-Type:application/json' --location --request POST "https://scu37051.live.dynatrace.com/api/v1/events"  -H 'Accept:application/json' -HAuthorization:"Api-Token ${int_DTEnvInfo_DT_API_TOKEN}" -d "{\"eventType\":\"CUSTOM_DEPLOYMENT\",\"attachRules\":{\"tagRule\":{\"meTypes\":\"SERVICE\",\"tags\":[{\"context\":\"CONTEXTLESS\",\"key\":\"JFrog\",\"value\":\"busybox\"}]}},\"deploymentName\":\"RuntimeDeployment\",\"deploymentVersion\":\"${res_simplehelmChart_aa_version}\",\"deploymentProject\":\"BusyBox-nginx\",\"source\":\"${int_artifactoryIntegration_url}\",\"customProperties\":{\"ChartVersion\":${ChartVersion},\"JFrogArtifactoryUrl\":\"${int_artifactoryIntegration_url}\",\"HelmInstallationName\":${HelmInstallationName},\"RunNumber\":\"${run_number}\",\"DeployedOnCluster\":${DeployedOnCluster},\"VCS_URL\":${VCS_URL},\"DockerImageName\":\"${build_image_dockerImageName}\"}}"

            #- >-
             #curl 
            #- buildNumber="$(${JSONOutput}| jq)"
            #- CLUSTER="$(curl --request GET)"
            - curl -H 'Content-Type:application/json' --location --request POST "https://scu37051.live.dynatrace.com/api/v1/events"  -H 'Accept:application/json' -HAuthorization:"Api-Token ${int_DTEnvInfo_DT_API_TOKEN}" -d "{\"eventType\":\"CUSTOM_DEPLOYMENT\",\"attachRules\":{\"tagRule\":{\"meTypes\":\"SERVICE\",\"tags\":[{\"context\":\"CONTEXTLESS\",\"key\":\"JFrog\",\"value\":\"busybox\"}]}},\"deploymentName\":\"RuntimeDeployment\",\"deploymentVersion\":\"${res_simplehelmChart_aa_version}\",\"deploymentProject\":\"BusyBox-nginx\",\"source\":\"${int_artifactoryIntegration_url}\",\"customProperties\":{\"ChartVersion\":${ChartVersion},\"JFrogArtifactoryUrl\":\"${int_artifactoryIntegration_url}\",\"HelmInstallationName\":${HelmInstallationName},\"RunNumber\":\"${run_number}\",\"DeployedOnCluster\":${DeployedOnCluster},\"VCS_URL\":${VCS_URL},\"DockerImageName\":\"${build_image_dockerImageName}\"}}"
            #-H "content-type: "
            #- curl -X POST "https\://scu37051.live.dynatrace.com/api/v1/events" --header "accept: application/json"
            #- curl --location --request PUT "${int_artifactoryIntegration_url}/api/storage/simplecharts/busybox-${res_simplehelmChart2_version}.tgz?properties=deployedOnCluster=${CLUSTER}%7ChelmInstallationName=${RELEASE_NAME}%7CdeploymentTimestamp=${TIME}" --header "Accept:application/json" --header "X-Jfrog-Art-Api:${int_artifactoryIntegration_apikey}"
          onSuccess:
            - echo ""
          onFailure:
            - echo "Failure"  